QUICK SORT USING RECURSION
- FASTEST ALGORITHM 
- STEPS: 
  1. CHOOSE PIVOT ELEMENT AND PLACES IT AT A CORRECT PLACE 
  2. THEN RECURSIVELY SORTS LHS , RHS SIDE OF THE PIVOT 

- CODE :
#include <iostream>
using namespace std;

void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

int partition(int arr[], int s, int e) {
    int pivot = arr[s]; // choosing the first element as pivot
    int cnt = 0; // counts the perfect place for pivot

    // Count elements less than or equal to the pivot
    for (int i = s + 1; i <= e; i++) {
        if (arr[i] <= pivot)
            cnt++;
    }

    // Place pivot at its correct position
    int pivotIndex = s + cnt;
    swap(arr[pivotIndex], arr[s]);

    // Rearrange elements to the left and right of the pivot
    int i = s;
    int j = e;
    while (i < pivotIndex && j > pivotIndex) {
        while (arr[i] < pivot) {
            i++;
        }

        while (arr[j] > pivot) {
            j--;
        }

        if (i < pivotIndex && j > pivotIndex) {
            swap(arr[i++], arr[j--]);
        }
    }

    return pivotIndex;
}

// Recursive function to perform quicksort
void quicksort(int arr[], int s, int e) {
    // Base case
    if (s >= e) {
        return;
    }

    // Partition the array
    int p = partition(arr, s, e);

    // Recursively sort the left part
    quicksort(arr, s, p - 1);

    // Recursively sort the right part
    quicksort(arr, p + 1, e);
}

int main() {
    int arr[5] = {2, 4, 1, 6, 9};
    int n = 5;
    quicksort(arr, 0, n - 1); // sorting start -> end
    for (int i = 0; i < n; i++) { // for printing array
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
